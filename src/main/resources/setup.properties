#Created by: Danish Mahboob
#Version: 0.2.9 - July 12 2018	- modify fn:param and fn:paste to now include paste from specific rows
#Version: 0.2.8 - July 9 2018 	- Allow settings to be entered via command line
#Version: 0.2.7 - Apr 24 2018 	- better reading of setup properties files 
#Version: 0.2.6 - Nov 24 2017 	- Allow user to use arrow keys using fn:upkey, fn:downkey, fn:rightkey, fn:leftkey.
#									Allow user to use copy to and paste from temp locations fn:copytotemp-1| or fn:pastefromtemp-1|
#									Allow user to press windows key via fn:windowskey
#Version: 0.2.5 - Nov 15 2017 	-	Better Logging and fix property load issue when starting the program with custom setup.properties
#Version: 0.2.4 - Nov 04 2017 	-	Allow comments in clipboard file starting with '#' or with empty line
#									Allow equal (=) in user commands 
#									Allow delay command via fn:delay:23423| (add delay)
#									Allow paste from text file via command fn:paste.from.file:C:\\test2.txt| 
#									Use user.automate.repetition.useclipboardfilecount in setup.properties. This will allow user to perform same number of repetitions as clipboard file. 
#Version: 0.2.3 - Nov 01 2017 	- Allow user to specify command in one line mixed with robot type characters. 
#									Also allowed users to user compute-#! compute # would read column # and allows functions
#									Also added Java Util Logging. Just logs to console at the moment
#Version: 0.2.1 - Oct 30 2017 	- bugfix for 0.1.6 - due to limitation enter tab buttons dont work with \t and \n. for this added fn:enter and fn:tab
#Version: 0.2.0 - Oct 28 2017 	- removed numbering steps - now they are dynamically called. Either delay or value is accepted
#Version: 0.1.5 - Oct 27 2017 	- added ctrl+(anykey) and alt+(anykey)
#Version: 0.1.4 - Apr 13 2017 	- add multi column paste, add before paste in ms property
#Version: 0.1.3 - Apr 12 2017 	- add setup properties parameter
#Version: 0.1.2 - Apr 11 2017 	- add more functions, bug fixes, improving input readability
#Version: 0.1.1 - Apr 10 2017 	- add delay in between key events
#Version: 0.1.0 - Apr 10 2017 	- initial release
#
#1.0 README:
#
#Use steps to determine what input needs to be determined by the program. You can use these three parameters to determine data load from file:
#
#parameters allowed in steps values
#
#fn:param-1|						-- parameter entered from commandline (see commandline section)
#fn:windowskey						-- simulate windows key
#fn:tab								-- simulate tab key
#fn:enter							-- simulate enter key
#fn:upkey							-- simulate up arrow key
#fn:downkey							-- simulate down arrow key
#fn:rightkey						-- simulate right arrow key
#fn:leftkey							-- simulate left arrow key
#fn:copytotemp-						-- automates control+c command and saves it in a key. A key could be any String identifier such as numbers or letters or a combination of both. i.e. fn:copytotemp-2| would save (automate control+c) values into key 2 
#fn:pastefromtemp-					-- whatever was copied to fn:copytotemp- command fn:pastefromtemp- will try to paste the saved key using control+V keys. i.e. fn:pastefromtemp-2| will try to retrieve saved key 2 and paste it using control+V    
#fn:backspace						-- simulate backspace button
#fn:paste-1|						-- if reading from file use this to paste first column
#fn:paste-22|						-- if reading from file use this to paste 22nd column
#fn:paste-22,5|						-- if reading from file use this to paste 22nd column, 5th row
#fn:compute-21|						-- if reading from file use this to compute 21st column - column in file can be used to use any functions - this can allow dynamic functions
#fn:compute-21,5|					-- if reading from file use this to compute 21st column, 5th row - column in file can be used to use any functions - this can allow dynamic functions. 
#										Only dynamic functions from 5th row will be used (i,e if fn:compute5,1| -> first row and in the clipbord fifth column, first row says "fn:paste-3|" it will paste from third column, first row 
#fn:delete							-- simulate delete button
#fn:ctrl+<a-z>						-- simulate control + <a-z> button
#fn:alt+<a-z>						-- simulate alt + <a-z> button
#fn:spacebar						-- simulate space bar
#fn:delay:6000|						-- simulate delay function in ms (6000 -> 6 seconds)
#fn:paste.from.file:C:\\test2.txt|	-- simulate paste from file. It would open up a file, read it and paste the contents of it.
#majority of keys such as a,b,c,A,B,C,1,2,3,?,>,<,%,$,=,-,+ etc are supported and these can be combined in one step
#
#3.0 USAGE:
# a) Extract setup.properties from automateUserSimulation-x.x.x.jar and place it in the location of the jar
# b) Open command prompt (ensure you have java 8 jre) and type java -jar automateUserSimulation.jar
# c) Keep command prompt close as to stop the program anytime, you will need to navigate to cmd prompt and press ctrl+c. There is no kill command at the moment 

#3.1 Command line properties:
# -p1| <abc> -p2| <abc2> 				-- this is to pass in parameters
# -setup <setup.properties> 			-- this is to pass in setup.properties
# -rep <number of repetitions>			-- this is to pass in how many repetitions to do (equavalent of user.automate.repetition property)

#3.2 Overriding:
# note: command line parameters take higher preceidence over properties files variables.
 
#TODO:
# 1) Delay between actions should only happen between functions and not between typing i.e test vs fn:paste-1|fn:windowskeyfn:rightkey
# 2) Perform preliminary checks before starting the operations (i.e. number format exceptions, if all columns exist for paste
# 3) Instead of paste-1 you should be able to add headers and use header titles as column reference i.e. column: Paper,Pen,Lion use paste-column-Paper paste-column-Pen etc
# 4) Support URLS I.e. colon does not work, exclaimation mark does not work
# 5) Build a kill and pause button for the program i.e. pressing F10 would stop the program regardless of its state, F11 would pause the program
# 6) It would be nice to know if a key type fails to type, which key it was and which command it was on
# 7) Allow comments in clipboard file. 
# 8) allow user to continue when one key press fails especially with compute. allow them to replace with space or nothing
# 9) complete all global settings to be setup by command prompt 
# 10) better usage doc


# 4.0 General settings
# path to file to be read. This could be relative file as well.
file.read.path=C:\\temp\\test.txt
# delimiter for reading file (only two columns supported)
file.read.delim=\t
# right now only text is supported
file.read.type=text

#delay in seconds
user.automate.initialdelay=5000
#delay in between functions and input
user.automate.delay-between-actions-in-ms=0
#delay after fn:paste-# - minimum is 50 ms because there is a clipboard issue that happens if this value is too low.
user.automate.delay-before-paste-in-ms=50

#how many times to repeat the steps
user.automate.repetition=1

#The program is going to repeat n times. where n is number of clipboard (non commented) values. 
#Note: when this field is set to true, the user.automate.repetition field is overridden. 
user.automate.repetition.useclipboardfilecount=false

# 5.0 User Automated Steps 
# ******** START OF STEPS *********
# step to paste first column from read file
user.automate.step.value=fn:windowskeyfn:delay:500|notepadfn:delay:500|fn:enter
user.automate.step.value=fn:paste-1|
# 1 second delay 
user.automate.step.delay=1000
# paste column 3
user.automate.step.value=fn:paste-3|fn:delay:500|
# back space (only one function per step)
user.automate.step.value=fn:backspace
user.automate.step.delay=2000
# paste second column
user.automate.step.value=fn:paste-2|
user.automate.step.delay=2000
# control+A
user.automate.step.value=fn:ctrl+afn:delay:500|
# paste column 4
user.automate.step.value=fn:paste-4|

user.automate.step.value=test
#user.automate.step.value=fn:delay:1000|fn:leftkeyfn:delay:1000|fn:copytotemp-1|
#user.automate.step.value=fn:delay:1000|fn:leftkeyfn:pastefromtemp-1|
# ******** END OF STEPS *********
